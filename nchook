#!/usr/bin/env python3.9

from multiprocessing import reduction
import apsw
import time
import plistlib
import pprint
import logging
import subprocess
import os.path
import pathlib
from datetime import datetime
from watchdog.observers.kqueue import KqueueObserver
from watchdog.events import FileSystemEventHandler

def process(row):
    data = {}
    plist = plistlib.loads(row[3])
    title = plist['$objects'][2]
    message = plist['$objects'][3]
    data['id'] = row[1]
    data['message'] = message
    data['title'] = title
    date = row[1]
    date_time = datetime.utcfromtimestamp(date + 978307200)
    app = row[2]
    data['app'] = app
    data['date'] = date_time.strftime('%Y-%m-%d %H:%M:%S')

    return data
class DBEventHandler(FileSystemEventHandler):
    """Handles notification DB change events"""

    def __init__(self, db, note_ids, hook_script_path):
        super().__init__()
        self.db = db
        self.note_ids = note_ids
        self.hook_script_path = hook_script_path
        self.logger = logging.root

    # don't really care about move, create, delete events
    def on_moved(self, event):
        pass

    def on_created(self, event):
        pass

    def on_deleted(self, event):
        pass

    def on_modified(self, event):
        super().on_modified(event)
        cursor = self.db.cursor()

        # select notifications we don't know about
        sql = 'SELECT date_presented, note_id, '\
          '(SELECT bundleid from app_info WHERE app_info.app_id = '\
          'presented_notifications.app_id) AS bundle, (SELECT encoded_data '\
          'from notifications WHERE notifications.note_id = '\
          'presented_notifications.note_id) AS data '\
          f'from presented_notifications WHERE note_id NOT IN ({",".join("?" * len(self.note_ids))})'

        # query the db, and process it to a list of notif. IDs and data.
        # the db might be busy so just wait it out.
        while True:
            try:
                new_objs = []
                for row in cursor.execute(sql, self.note_ids):
                    new_objs.append(process(row))
                break
            except apsw.BusyError:
                time.sleep(1)

        self.logger.info(f"-- NEW -- : {len(new_objs)}")

        for obj in new_objs:
            # add new IDs to known IDs
            self.note_ids.append(obj['id'])

            self.logger.info(obj)
            # run script for each new notification
            result = subprocess.run(
                args=[
                    self.hook_script_path,
                    obj["title"],
                    obj["message"],
                    obj["date"]
                ],
                capture_output=True
            )
            self.logger.info(f"stdout: {result.stdout}")
            self.logger.info(f"stderr: {result.stderr}")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s - %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')

    # contains notification center db, different for each user so we need to
    # find it every time.
    darwin_user_folder = subprocess.run(
        ['getconf', 'DARWIN_USER_DIR'], capture_output=True).stdout.decode("utf-8").strip()

    db_folder = os.path.join(
        darwin_user_folder,
        "com.apple.notificationcenter",
        "db"
    )

    # we watch the write ahead log becuase that actually changes with the DB update
    # but we need to query the actual db file for the changes
    db_file = os.path.join(db_folder, "db")
    watch_file = os.path.join(db_folder, "db-wal")
    # db_file = "db"
    # watch_file = "db-wal"

    db = apsw.Connection(db_file)
    note_ids = []

    # path to script the user wants to run on a notification being sent
    hook_script_path = os.path.join(
        pathlib.Path.home(), ".config", "nchook", "nchook_script"
    )

    event_handler = DBEventHandler(db, note_ids, hook_script_path)

    # we have to use a Kqueue observer not FSEvents because FSEvents
    # doesn't send updates for files the user doesn't own for privacy stuff,
    # even though this is the user's notification database
    observer = KqueueObserver()
    observer.schedule(event_handler, watch_file)
    observer.start()
    try:
        while True:
            time.sleep(1)
    finally:
        observer.stop()
        observer.join()
